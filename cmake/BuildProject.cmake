cmake_minimum_required(VERSION 3.9)

function(BuildProject_CheckSystemVariablesExistence)
  # these must always exist at any stage
  if (NOT EXISTS "${CMAKE_OUTPUT_ROOT}")
    message(FATAL_ERROR "CMAKE_OUTPUT_ROOT directory must be existed: `${CMAKE_OUTPUT_ROOT}`")
  endif()
  if (NOT EXISTS "${CMAKE_BUILD_ROOT}")
    message(FATAL_ERROR "CMAKE_BUILD_ROOT directory must be existed: `${CMAKE_BUILD_ROOT}`")
  endif()
  if (NOT EXISTS "${CMAKE_BIN_ROOT}")
    message(FATAL_ERROR "CMAKE_BIN_ROOT directory must be existed: `${CMAKE_BIN_ROOT}`")
  endif()
  if (NOT EXISTS "${CMAKE_LIB_ROOT}")
    message(FATAL_ERROR "CMAKE_LIB_ROOT directory must be existed: `${CMAKE_LIB_ROOT}`")
  endif()
  if (NOT EXISTS "${CMAKE_INSTALL_ROOT}")
    message(FATAL_ERROR "CMAKE_INSTALL_ROOT directory must be existed: `${CMAKE_INSTALL_ROOT}`")
  endif()
  if (NOT EXISTS "${CMAKE_CPACK_ROOT}")
    message(FATAL_ERROR "CMAKE_CPACK_ROOT directory must be existed: `${CMAKE_CPACK_ROOT}`")
  endif()

  if (NOT EXISTS "${CMAKE_BUILD_DIR}")
    message(FATAL_ERROR "CMAKE_BUILD_DIR directory does not exist `${CMAKE_BUILD_DIR}`")
  endif()
  if (NOT EXISTS "${CMAKE_BIN_DIR}")
    message(FATAL_ERROR "CMAKE_BIN_DIR directory does not exist `${CMAKE_BIN_DIR}`")
  endif()
  if (NOT EXISTS "${CMAKE_LIB_DIR}")
    message(FATAL_ERROR "CMAKE_LIB_DIR directory does not exist `${CMAKE_LIB_DIR}`")
  endif()
  if (NOT EXISTS "${CMAKE_INSTALL_ROOT}")
    message(FATAL_ERROR "CMAKE_INSTALL_ROOT directory does not exist `${CMAKE_INSTALL_ROOT}`")
  endif()
  if (NOT EXISTS "${CMAKE_CPACK_DIR}")
    message(FATAL_ERROR "CMAKE_CPACK_DIR directory does not exist `${CMAKE_CPACK_DIR}`")
  endif()

  if(NOT PROJECT_NAME)
    message(FATAL_ERROR "PROJECT_NAME must be defined")
  endif()
  if(NOT EXISTS "${PROJECT_ROOT}")
    message(FATAL_ERROR "PROJECT_ROOT directory must be existed: `${PROJECT_ROOT}`")
  endif()

  if(NOT CMAKE_CONFIG_TYPES)
    message(FATAL_ERROR "CMAKE_CONFIG_TYPES must be defined")
  endif()
  if(NOT CMAKE_GENERATOR)
    message(FATAL_ERROR "CMAKE_GENERATOR must be defined")
  endif()
endfunction()

function(BuildProject_MakeOutputDirsVariables build_type)
  if (build_type)
    set(CMAKE_BUILD_DIR "${CMAKE_BUILD_ROOT}/${build_type}" PARENT_SCOPE)
    set(CMAKE_BIN_DIR "${CMAKE_BIN_ROOT}/${build_type}" PARENT_SCOPE)
    set(CMAKE_LIB_DIR "${CMAKE_LIB_ROOT}/${build_type}" PARENT_SCOPE)
    set(CMAKE_CPACK_DIR "${CMAKE_CPACK_ROOT}/${build_type}" PARENT_SCOPE)
  else()
    set(CMAKE_BUILD_DIR "${CMAKE_BUILD_ROOT}" PARENT_SCOPE)
    set(CMAKE_BIN_DIR "${CMAKE_BIN_ROOT}" PARENT_SCOPE)
    set(CMAKE_LIB_DIR "${CMAKE_LIB_ROOT}" PARENT_SCOPE)
    set(CMAKE_CPACK_DIR "${CMAKE_CPACK_ROOT}" PARENT_SCOPE)
  endif()
endfunction()

function(BuildProject_MakeOutputDirs)
  get_filename_component(CMAKE_OUTPUT_ROOT_DIR ${CMAKE_OUTPUT_ROOT} DIRECTORY)
  if (NOT EXISTS "${CMAKE_OUTPUT_ROOT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_OUTPUT_ROOT does not exist `${CMAKE_OUTPUT_ROOT}`")
  endif()

  file(MAKE_DIRECTORY "${CMAKE_OUTPUT_ROOT}")

  get_filename_component(CMAKE_OUTPUT_PARENT_DIR ${CMAKE_OUTPUT_DIR} DIRECTORY)
  if (NOT EXISTS "${CMAKE_OUTPUT_PARENT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_OUTPUT_DIR does not exist `${CMAKE_OUTPUT_DIR}`")
  endif()

  file(MAKE_DIRECTORY "${CMAKE_OUTPUT_DIR}")

  file(MAKE_DIRECTORY "${CMAKE_BUILD_ROOT}")
  file(MAKE_DIRECTORY "${CMAKE_BIN_ROOT}")
  file(MAKE_DIRECTORY "${CMAKE_LIB_ROOT}")
  file(MAKE_DIRECTORY "${CMAKE_INSTALL_ROOT}")
  file(MAKE_DIRECTORY "${CMAKE_CPACK_ROOT}")

  get_filename_component(CMAKE_BUILD_PARENT_DIR ${CMAKE_BUILD_DIR} DIRECTORY)
  if (NOT EXISTS "${CMAKE_BUILD_PARENT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_BUILD_DIR does not exist `${CMAKE_BUILD_DIR}`")
  endif()

  get_filename_component(CMAKE_BIN_PARENT_DIR ${CMAKE_BIN_DIR} DIRECTORY)
  if (NOT EXISTS "${CMAKE_BIN_PARENT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_BIN_DIR does not exist `${CMAKE_BIN_DIR}`")
  endif()

  get_filename_component(CMAKE_LIB_PARENT_DIR ${CMAKE_LIB_DIR} DIRECTORY)
  if (NOT EXISTS "${CMAKE_LIB_PARENT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_LIB_DIR does not exist `${CMAKE_LIB_DIR}`")
  endif()

  get_filename_component(CMAKE_INSTALL_ROOT_DIR ${CMAKE_INSTALL_ROOT} DIRECTORY)
  if (NOT EXISTS "${CMAKE_INSTALL_ROOT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_INSTALL_ROOT does not exist `${CMAKE_INSTALL_ROOT}`")
  endif()

  get_filename_component(CMAKE_CPACK_PARENT_DIR ${CMAKE_CPACK_DIR} DIRECTORY)
  if (NOT EXISTS "${CMAKE_CPACK_PARENT_DIR}")
    message(FATAL_ERROR "parent directory of the CMAKE_CPACK_DIR does not exist `${CMAKE_CPACK_DIR}`")
  endif()

  file(MAKE_DIRECTORY "${CMAKE_BUILD_DIR}")
  file(MAKE_DIRECTORY "${CMAKE_BIN_DIR}")
  file(MAKE_DIRECTORY "${CMAKE_LIB_DIR}")
  file(MAKE_DIRECTORY "${CMAKE_CPACK_DIR}")
endfunction()

function(BuildProject_UpdateConfigTypes config_types)
  if (NOT DEFINED CMAKE_CURRENT_PACKAGE_NEST_LVL)
    message(FATAL_ERROR "CMAKE_CURRENT_PACKAGE_NEST_LVL is not defined")
  endif()
  if (NOT DEFINED GENERATOR_IS_MULTI_CONFIG)
    message(FATAL_ERROR "GENERATOR_IS_MULTI_CONFIG is not set")
  endif()
  if (NOT CMAKE_CONFIG_TYPES)
    message(FATAL_ERROR "CMAKE_CONFIG_TYPES is not set")
  endif()

  # reuse default description
  get_property(desc CACHE "CMAKE_CONFIGURATION_TYPES" PROPERTY HELPSTRING)

  if (NOT CMAKE_CURRENT_PACKAGE_NEST_LVL)
    if (GENERATOR_IS_MULTI_CONFIG)
      if (NOT CMAKE_CONFIG_TYPES STREQUAL CMAKE_CONFIGURATION_TYPES)
        # override CMAKE_CONFIGURATION_TYPES
        set(CMAKE_CONFIGURATION_TYPES_OLD "${CMAKE_CONFIGURATION_TYPES}")

        set(CMAKE_CONFIGURATION_TYPES_TO_ADVANCE "${CMAKE_CONFIG_TYPES}")
        list(REMOVE_ITEM CMAKE_CONFIGURATION_TYPES_TO_ADVANCE ${CMAKE_CONFIGURATION_TYPES})

        # double set with CACHE FORCE is required to update the change properly
        set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIG_TYPES}" CACHE STRING "${desc}" FORCE)
        set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIG_TYPES}" PARENT_SCOPE)
        set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIG_TYPES}")

        # advance ONLY is has non standard configurations
        if (CMAKE_CONFIGURATION_TYPES_TO_ADVANCE)
          mark_as_advanced(CMAKE_CONFIGURATION_TYPES)
        endif()

        if (CMAKE_CONFIGURATION_TYPES_TO_ADVANCE)
          message(STATUS "(*) variable update: CMAKE_CONFIGURATION_TYPES: `${CMAKE_CONFIGURATION_TYPES_OLD}` -> `${CMAKE_CONFIGURATION_TYPES}` (advanced: +`${CMAKE_CONFIGURATION_TYPES_TO_ADVANCE}`)")
        else()
          message(STATUS "(*) variable update: CMAKE_CONFIGURATION_TYPES: `${CMAKE_CONFIGURATION_TYPES_OLD}` -> `${CMAKE_CONFIGURATION_TYPES}` (overriden)")
        endif()
      endif()
    endif()
  else()
    if (GENERATOR_IS_MULTI_CONFIG)
      if (NOT CMAKE_CONFIG_TYPES STREQUAL CMAKE_CONFIGURATION_TYPES)
        message(FATAL_ERROR "Only a top level project can change project configuration list: CMAKE_CONFIGURATION_TYPES=`${CMAKE_CONFIGURATION_TYPES}` CMAKE_CONFIG_TYPES=`${CMAKE_CONFIG_TYPES}`")
      endif()
    endif()
  endif()
endfunction()
