2019.05.26:
* fixed: missed to `TACKLELIB_TEMP_DIR_LAST_TIMESTAMP_INDEX` increment in the `MakeTemp.cmake`
* refactor: minor functions changes and rename
* missed changes

2019.05.25:
* fixed: improved character escaping/unescaping for `Handlers.cmake`, `Eval.cmake`, `Std.cmake`
* fixed: global variables cleanup after `TestLib.cmake`, `Handlers.cmake` and others
* new: standalone `tkl_encode_control_chars_for_eval` function to escape characters before pass to eval like functions
* changed: `Handlers.cmake` variable names length reduced
* changed: reduced test file path length (cutted off trailing `.test.cmake`) in tests output in the `TestLib.cmake` and `TestModule.cmake`

2019.05.25:
* fixed: `--path_match_filter` usage in `TestLib.cmake`
* fixed: missed variable expansion in `TestLib.cmake` and `TestModule.cmake`

2019.05.25:
* fixed: multiple `tkl_testlib_exit` call
* changed: removed initialization/uninitialization code from user test library/modules, make it explicit from standalone cmake scripts (`RunTestLib.cmake` and `RunTestModule.cmake`)

2019.05.24:
* fixed: `Handlers.cmake` evaluation after add/remove handlers
* fixed: the `--path_match_filter` in the `TestLib.cmake` is not properly ignored different character case in file paths in the Windows
* new: standalone property getter in the `Props.cmake` to explicitly state the operation details
* new: standalone properties to set/get file system case sensitivity and back slash separator support
* new: `tkl_get_vars_stack_size`, `tkl_get_prop_stack_size` functions in the `ForwardVariables.cmake`
* changed: internal include files cleanup in the `Handlers.cmake` now handles in the begginning of the execution intead of in the end
* changed: the `--path_match_filter` in the `TestLib.cmake` now does ignore the printing of not processed directories enter/leave
* changed: `TestLib.cmake` improvements
* refactor: `var_out` function arguments renamed to `out_var`

2019.05.22:
* fixed: `TestLib.cmake` minor fixup

2019.05.21:
* fixed: `Eval.cmake` rewrited to enable `return()` call with cleanup (through the function hookup)
* fixed: current working directory accidental erase issue with the `file(REMOVE_RECURSE "${empty_or_unexisted_variable}")` command (https://gitlab.kitware.com/cmake/cmake/issues/19274 )
* new: `Handlers.cmake` for a function/macro call handling/hooking (incomplete)
* new: `Reimpl.cmake` to explicitly register and check registration of a reimplementation of functions and macroses
* changed: `make_argn_var_from_ARGV_ARGN_*` renamed into `make_vars_from_ARGV_ARGN_*` with usage of additional explicit variable names to output
* changed: `make_argv_var_from_ARGV_*` renamed into `make_var_from_ARGV_*` with usage of additional explicit variable name to output
* changed: `begin_emulate_shift_argn_arguments` rewrited into `begin_emulate_shift_ARGVn` w/o arguments (incomplete)
* changed: `parse_config_names_list_var` rewrited to explicitly declare input/output variables
* changed: `tkl_pushset_*`, `tkl_pushunset_*`, `tkl_pop*` functions are rewrited to store whole stack in a global properties instead of a local variables (stack that way could be accessed anywhere from a cmake process)
* changed: `List.cmake` extracted from `Std.cmake`
* changed: `File.cmake` extracted from `Std.cmake`
* changed: `Props.cmake` extracted from `Std.cmake`
* changed: `Utility.cmake` extracted from `Std.cmake`
* changed: improved `TestLib.cmake` and `TestModule.cmake` modules
* changed: other overall fixes and improvements
* refactor: global directories, files, functions, macroses, global variables and properties changes:
** all moved into `tacklelib` subdirectory to explicitly address modules with `tacklelib/` prefix in include commands and avoid accidental intersection with 3dparty cmake modules
** added prefix `tkl_` to all macroses and functions (except 3dparties, except standalone tools and hooks/handlers) to explicitly stand for the `tacklelib` and avoid accidental intersection with 3dparty cmake modules
** added prefix `TACKLELIB_` to all global variables (except 3dparties and standalone tools) to explicitly stand for the `tacklelib` and avoid accidental intersection with 3dparty cmake modules
** added prefix `tkl::` to all properties to explicitly stand for the `tacklelib` and avoid accidental intersection with other cmake properties
** all functions and macroses decapitalized to lower `snake_case` (except global variable names in macro/function names), all global variables capitalized to upper `SNAKE_CASE`
** all function and macros names reworked
** all file names in `PascalCase`
** all directory names in lower `snake_case`
** `Common.cmake` renamed into `Project.cmake` as related only to the project build
** `BuildProject.cmake` merged into `Project.cmake`

2019.05.13:
* fixed: `Eval.cmake` after tests
* fixed: `make_argn_var_from_ARGV_ARGN_begin` and `make_argn_var_from_ARGV_ARGN_end` after tests
* changed: `TestLib.cmake` minor improvement

2019.05.13:
* changed: implemented `TestAssertTrue(if_exp ...)` in the `TestModule.cmake` through the `Eval("if(${exp}) ...")` to be able to use the cmake if expressions in the first argument of the `TestAssertTrue` macro
* changed: `Eval.cmake` minor impovement
* changed: `TestModule.cmake` minor impovements

2019.05.13:
* changed: added timestamp format string, process index and timestamp index into `MakeTempDir` function in the `MakeTemp.cmake` to be able to arrange temporary directories in creation order

2019.05.13:
* fixed: `make_argv_var_from_ARGV_begin` and `make_argv_var_from_ARGV_end` in complex expressions
* fixed: `make_argn_var_from_ARGV_ARGN_begin` and `make_argn_var_from_ARGV_ARGN_end` in complex expressions
* fixed: `make_var_from_CMAKE_ARGV_ARGC` in complex expressions
* new: `MakeTemp.cmake` script to make a temporary directory from cmake
* new: `Eval.cmake` script to evaluate a cmake expression from cmake (supported multiline separator - `\n` and internal variable evaluation - `${...}` (use `$\\{...}` to escape it instead))
* new: `CMakeEval.cmd.cmake` script to evaluate a cmake expression from cmake script mode (supported multiline separator - `\n` and internal variable evaluation - `${...}` (use `$\{...}` to escape it instead))
* new: `encode_control_chars`/`decode_control_chars` (`Std.cmake`) functions to help recode characters before call to macroses or inside `Eval` function (macroses has side effects in the cmake)
* new: `ReturnCodeFile.cmake` module to read/write return codes out of cmake process
* new: `TestModule.cmake` module to execute test cases in a test module
* changed: `TestLib.cmake` return code read from external cmake process
* refactor: `string(REGEX REPLACE "\;" "\\\;" ...)` replaced by `string(REPLACE ";" "\;" ...)`

2019.05.07:
* changed: readme update

2019.05.07:
* new: `TestLib.cmake` to test cmake modules from the cmake itself

2019.05.06:
* changed: minor change

2019.04.29:
* fixed: configure w/o errors
* new: SetVarsFromFiles.cmake: `final` variable attribute to seal a variable reassign with an error instead of a warning, keep usage of the `override` attribute to enable an overridable assignment

2019.04.26:
* fixed: SetVarsFromFiles.cmake: update all case insensitive paths to correctly compare them
* fixed: SetVarsFromFiles.cmake: `top` attributed variables usage
* fixed: SetVarsFromFiles.cmake: not `override` attributed variables from the `environment_user.vars` configuration file now loads respective to the top level package (variable assignment does ignore in a not top level package if a variable was assigned in the top level package)
* removed: SetVarsFromFiles.cmake: the `package` variable attribute is no longer needed, all variables must be treated as package level scoped (the `CMAKE_CURRENT_PACKAGE_NEST_LVL` variable usage now is a mandatory for that case)

2019.04.25:
* new: SetVarsFromFiles.cmake: top/package/override variable attributes to (1) ignore variables at not top level stages (both must have `top` attribute), (2) to throw an error on implicit override of a top variable (only one have `top` attribute), (3) excplicit override of any pattern matched variable (`override` attribute, where implicit override is a simple assignment) and etc

2019.04.15:
* refactor: replaced a specific regex workaround to a bit faster version

2019.04.11:
* fixed: set_vars_from_files issue around `file(STRINGS ...)` function reported here: https://gitlab.kitware.com/cmake/cmake/issues/19156 (`Not paired `]` or `[` characters breaks "file(STRINGS"`)

2019.03.17:
* fixed: SetVarsFromFiles.cmake: Multiple "ODR violation" messages in case where a path is different from the cache storage only by the drive letter character case (cmake changes a path variables before write them into the cache). Read variable's ending to detect type of variable (*_ROOT, *_PATH, *_DIR, etc) to adopt a comparator code.

2019.03.17:
* fixed: operators precedence order issue after the OR operator in case of parentheses absence (added parentheses around every OR operator)
* fixed: added most important global variables consistency check after leaving of add_subdirectory and others functions (global variables change has detected in some 3dparty libraries, so this seems is requirement now)

2019.03.13:
* changed: new implementation to load a list of files together with nested package support, builtin variables, explicit variables and other parameters in the `SetVarsFromFile.cmake`

2019.03.01:
* changed: more improvements in the `SetVarsFromFile.cmake` and `Std.cmake`

2019.02.28:
* changed: more improvements in the `SetVarsFromFile.cmake`

2019.02.26:
* changed: improved `SetVarsFromFile.cmake`

2019.02.17:
* new: `set_vars_from_file` (SetVarsFromFile.cmake) function to load configuration variables from standalone configuration file with support of single/list values, inline conditions, substitutions and character escaping
* new: `copy_variables` (ForwardVariables.cmake) function to copy parent scope variables into 2 arbitrary lists with names and values

2019.02.09:
* refactor: restored back all moved to the tackelib cmake subdirectory cmake module files as a better method to reference all cmake modules at once
* refactor: new cmake modules hierarchy

2019.01.17:
* fixed: missed to retain some scripts

2018.12.07:
* changed: the include/link inheritance type is added to `link_qt_components` function

2018.12.05:
* refactor: `Common.cmake` and other basic modules moved into `tacklelib` repository to support calls in the root `CMakeLists.txt` file in the tacklelib sources

2018.11.30:
* fixed: set_target_property function

2018.11.30:
* fixed: install under linux into inner directory
* changed: add_target_static_lib_properties function merged into add_target_link_properties function

2018.11.13:
* fixed: variables discovery ignores environment variables in case of cached one

2018.10.30:
* fixed: invalid path exclusion in case of paths begins by the "/~" in exclude_paths_from_path_list function
* changed: disable optimization in debug by default

2018.10.29:
* fixed: missed to remove from the global list the imported not global targets which are visible only from directory target
* new: set_target_property function with include/exclude patterns/filters to set a single property but for set of targets from a particular directory with or without recursion

2018.10.26:
* fixed: accidental invalid usage issue of add_target_compile_definitions function, added explicit check with FATAL_ERROR

2018.10.22:
* fixed: ARGV and ARGV0..N variables shift in case of overriden system functions like find_package/add_subdirectory/etc (macro contexts), fixed by replacing overriden functions from macros to functions and custom propogating variable changes to parent scope
* new: ForwardVariables.cmake module to forward changed variables to parent scope
* refactor: variable discovery

2018.10.16:
* new: uniform way to set FOLDER property on a target via set_target_folder function
* changed: add_target_subdirectory_from_dir_var merged into add_target_subdirectory
* changed: extended exclude_file_paths_from_path_list and exclude_paths_from_path_list functions by optional exclude_list output
* refactor: replaced variable expansion by `IN LISTS` in all foreach instructions

2018.10.15:
* new: set_target_folder_by_pattern function to set target folders by package source directory pattern together with target pattern
* new: added to builtin find_package function a custom first parameter for package source directory variable name (with back compatability to original syntaxes)
* new: added to find_qt_component function a custom first parameter for package source directory variable name (with back compatability to original syntaxes)

2018.10.12:
* fixed: alias (read only) targets change attempt
* cmake minor improvement and cleanup

2018.10.09:
* minor refactor

2018.10.08:
* new: targets extension module
* new: set_target_folder_from_dir function to set target folder for a target from target source directory

2018.08.30:
* new: Qwt library module

2018.08.14:
* new: FindWindowsSDK.cmake script to explicitly detect WindowsSDK headers/libraries

2018.08.14:
* new: executable/library basic initialization to add default preprocessor definition, compiler and linker keys

2018.08.09:
* refactor: cmake build scripts

2018.07.15:
* fixed: Common.cmake configure_environment script
* new: add_target_subdirectory to ignore add already added subdirectories
* new: ExternalProjectEx.cmake script

2018.06.17:
* fixed: escaping was not supported from a file configured by the configure_file cmake command

2018.05.07:
* new: cmake environment discovery support for builtin variables
* new: CMAKE_CONFIG_TYPES coverts now into builtin CMAKE_CONFIGURATION_TYPES variable and vice versa (if empty)
* new: standalone changelog file added
