2018.08.09:
* fixed: linux build

2018.08.08:
* fixed: missed tackle::path_string class operator+ overload
* fixed: minor testlib fix
* new: math::reduce_float_exp_delta, utility::create_directory_if_not_exist, utility::get_file_name, utility::get_file_name_stem functions

2018.08.03:
* new: std::make_unique if not implemented by standard headers
* new: calibrate_tick_step_to_closest_power_of_10 function to calculate axis value label tick step in ui graph plots
* refactor: utility/platform.hpp

2018.07.23:
* fixed: missed tackle::path_string class operator+ overload

2018.07.18:
* refactor: tacklelib math trigonometric functions converted to templated

2018.07.16:
* new: math::angle_distance function
* new: math::angle_distance unit tests

2018.07.15:
* new: math::angle_closest_distance and math::normalize_angle_to_range functions
* new: unit tests
* refactor: build scripts refactor
* minor refactor, fixup and cleanup

2018.07.06:
* fixed: math::normalize_angle test missed

2018.07.05:
* refactor: testlib refactor, moved macro code into functions
* minor fixup and cleanup

2018.07.04:
* fixed: always use radians for internal representation (better precision)
* minor fixup and cleanup

2018.07.03:
* new: tackle::path_string instead of std::string in the filesystem manipulation functions
* refactor: testlib refactor

2018.07.02:
* fixed: linux build fix

2018.06.25:
* fixed: fixed not linkable destruct() function issue
* fixed: full build fix
* fixed: testlib inconsistent linkage under GCC
* cleanup

2018.06.22:
* fixed: workarounded not linkable destruct() function issue

2018.06.20:
* fixed: aligned storage types compilation and cast fixes
* fixed: build scripts init error on unexisted configuration files
* fixed: std::identity replaced because of deprecation in the msvc2017
* new: tackle variant class to get/set multitype container at runtime

2018.06.19:
* refactor: type traits refactor

2018.06.18:
* new: vars and cmake file generator stop with error if files already existed but input and output file versions are different

2018.06.15:
* refactor: moved gtest wrapper functions and symbols into standalone library - testlib

2018.06.10:
* refactor: math.hpp debug performance partial optimization

2018.06.08:
* refactor: replaced ASSERT_*/VERIFY_* macroses in various non test headers/translation files by the DEBUG_ASSERT_*/DEBUG_VERIFY_* macroses to reduce slowdown unit/bench tests in the release configuration
* refactor: other minor refactor

2018.05.07:
* fixed: valgrind illegal instruction error under Linux (__builtin_trap())
* fixed: build script minor fixes
* fixed: unit tests
* refactor: deque unit tests
* refactor: type traits
* refactor: stream storage

2018.05.06:
* fixed: deque implementation/tests bug fix

2018.05.05:
* fixed: deque implementation/tests bug fix
* fixed: minor build fix under Visual Studio 2017 15.7.3
* new: more deque implementation/tests
* changed: cmake toolset switch adoptation for the Visual Studio 2017

2018.05.04:
* fixed: gcc build under linux mint
* fixed: minor bug fix
* new: `tackle/deque.hpp` partial implementation
* new: tests for `tackle/deque.hpp` partial implementation

2018.05.30:
* new: `compressed_type` and `call_traits` based on `boost` library implementation

2018.05.29:
* fixed: missed implementation in the static assert header
* fixed: invalid assert usage in math functions (`BASIC_ASSERT_*` instead of `DEBUG_ASSERT_*`)
* new: `UTILITY_SUPPRESS_OPTIMIZATION_ON_VAR` macros to suppress optimizations around variables or return values in the Release
* new: unit tests under gtest
* changed: `int_log2_floor` function loop unroll (debug builtin optimization)
* changed: permanently enabled POF2 definitions
* changed: `boost::aligned_storage` usage replaced by `std::aligned_storage` to detach public headers from boost headers (C++11)
* refactor: more optimized POF2 definitions for constexpr and runtime cases

2018.05.27:
* fixed: `DEFINE_FORCE_INLINE_TO_FORCE_NO_INLINE` usage

2018.05.22:
* changed: debug.hpp/optimization.hpp definitions check changed from #ifdef/#ifndef into #if/#if! as more safe
* changed: minor improvement
* new: `ERROR_IF_EMPTY_PP_DEF` macro for self filter only not empty defined definitions in `#if` blocks, otherwise through an error

2018.05.21:
* fixed: private definitions interference with public headers
* fixed: aligned_storage_by incorrect declaration header (ODR violation)
* fixed: no case match globbing restore in the `collect_ldd_deps.sh` script
* new: memory functions header

2018.05.07:
* fixed: postinstall fix
* fixed: application main startup helper shell script fix
* fixed: complete build under linux mint
* new: traplib.sh build script
* new: in sources changelog
* other multiple fixes, changes and refactor
