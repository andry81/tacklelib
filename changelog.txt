2018.10.05:
* new: 7zip lzma encoder c++ wrapper initial implementation
* changed: replaced usage of boost::shared_ptr in all places by the std::shared_ptr
* changed: tackle::SmartHandle now takes any deleter behaving like a function
* changed: tackle::SmartHandle improved to take inner deleter-with-state value directly in a protected constructor or reset function
* changed: tackle::SmartHandle improved to construct inner state through the std::make_shared to reduce memory allocation calls
* changed: tackle::SmartHandle improved by removing redundant state by shared pointer holder
* changed: tackle::SmartHandle improved by specializing for the void type

2018.10.05:
* changed: build scripts minor changes

2018.10.02:
* new: p7 logger c++ wrapper classes and macroses

2018.10.01:
* minor improvements

2018.09.27:
* fixed: build fix
* fixed: points_distance_epsilon_to_radius_vector_epsilon and radius_vector_epsilon_to_points_distance_epsilon functions
* refactor: refactored vector tolerances/epsilons usage

2018.09.25:
* new: testlib test::log_out_predicate* functions to print log with predicate call
* new: testlib test::log_out_va function with va_list parameter

2018.09.24:
* fixed: DEG_* macros to assert an angle value type of user class, added DEG_*2 macroses to explicitly use `pi` predicate of an user class type
* fixed: consexpr compilation in msvc 2015
* new: some unit tests over QD recent patches
* refactor: mediate refactor

2018.09.20:
* fixed: third type usage in the tackle::variant class
* fixed: internal type case in the tackle::max_aligned_storage class
* new: vector_angle function
* refactor: global std types refactor, replaced all math/float c functions by c++ function from std namespace as more reliable
* refactor: debug break before throw in functions of tackle types
* other minor fixes and refactor

2018.09.18:
* new: utility::inline_stack class to light weight incode stack tracing
* new: UTILITY_IS_TYPE_COMPLETE macro to test on type completeness
* new: gtest extension header (gtest_ext.hpp)
* fixed: tackle::deque capacity relocation/grow fix
* fixed: tackle::variant refactor and fixup
* fixed: tackle::aligned_storage_by refactor and fixup
* refactor: UTILITY_PP_FUNC replaced by UTILITY_PP_FUNCSIG
* other refactor, changes and fixup
* intermediate commit

2018.08.19:
* fixed: assertion private/public headers was not properly merged
* new: FPU precision test inside macro assertion to detect FPU precision corruption in a code
* changed: enabled asserts in release in a sensitive calculation to show up in unit tests

2018.08.18:
* fixed: accidental debug break call inside assertion macro in release which has lead test application to abort
* fixed: invalid non fatal failure level in unit test assertions
* fixed: continuous loop of assertion failures instead of test case quit on first fatal failure
* new: testlib: EXPECT_*_PRED macro extension from gtest
* refactor: moved TEST_LOG_OUT from macro to function

2018.08.16:
* refactor: tackle aligned storage headers to detach different classes from each other and avoid inclusion of invalid headers
* fixed: minor fixup

2018.08.13:
* fixed: minor math::reduce_float_exp_delta fix

2018.08.12:
* new: vector geometry generics and functions

2018.08.10:
* new: math::translate_angle function
* new: unit tests for math::translate_angle function
* refactor: minor refactor over math::normalize_angle_to_range function

2018.08.10:
* new: unit/bench tests "fmod vs math::normalize_angle"
* refactor: math::normalize_angle_to_range function

2018.08.09:
* fixed: linux build

2018.08.08:
* fixed: missed tackle::path_string class operator+ overload
* fixed: minor testlib fix
* new: math::reduce_float_exp_delta, utility::create_directory_if_not_exist, utility::get_file_name, utility::get_file_name_stem functions

2018.08.03:
* new: std::make_unique if not implemented by standard headers
* new: calibrate_tick_step_to_closest_power_of_10 function to calculate axis value label tick step in ui graph plots
* refactor: utility/platform.hpp

2018.07.23:
* fixed: missed tackle::path_string class operator+ overload

2018.07.18:
* refactor: tacklelib math trigonometric functions converted to templated

2018.07.16:
* new: math::angle_distance function
* new: math::angle_distance unit tests

2018.07.15:
* new: math::angle_closest_distance and math::normalize_angle_to_range functions
* new: unit tests
* refactor: build scripts refactor
* minor refactor, fixup and cleanup

2018.07.06:
* fixed: math::normalize_angle test missed

2018.07.05:
* refactor: testlib refactor, moved macro code into functions
* minor fixup and cleanup

2018.07.04:
* fixed: always use radians for internal representation (better precision)
* minor fixup and cleanup

2018.07.03:
* new: tackle::path_string instead of std::string in the filesystem manipulation functions
* refactor: testlib refactor

2018.07.02:
* fixed: linux build fix

2018.06.25:
* fixed: fixed not linkable destruct() function issue
* fixed: full build fix
* fixed: testlib inconsistent linkage under GCC
* cleanup

2018.06.22:
* fixed: workarounded not linkable destruct() function issue

2018.06.20:
* fixed: aligned storage types compilation and cast fixes
* fixed: build scripts init error on unexisted configuration files
* fixed: std::identity replaced because of deprecation in the msvc2017
* new: tackle variant class to get/set multitype container at runtime

2018.06.19:
* refactor: type traits refactor

2018.06.18:
* new: vars and cmake file generator stop with error if files already existed but input and output file versions are different

2018.06.15:
* refactor: moved gtest wrapper functions and symbols into standalone library - testlib

2018.06.10:
* refactor: math.hpp debug performance partial optimization

2018.06.08:
* refactor: replaced ASSERT_*/VERIFY_* macroses in various non test headers/translation files by the DEBUG_ASSERT_*/DEBUG_VERIFY_* macroses to reduce slowdown unit/bench tests in the release configuration
* refactor: other minor refactor

2018.05.07:
* fixed: valgrind illegal instruction error under Linux (__builtin_trap())
* fixed: build script minor fixes
* fixed: unit tests
* refactor: deque unit tests
* refactor: type traits
* refactor: stream storage

2018.05.06:
* fixed: deque implementation/tests bug fix

2018.05.05:
* fixed: deque implementation/tests bug fix
* fixed: minor build fix under Visual Studio 2017 15.7.3
* new: more deque implementation/tests
* changed: cmake toolset switch adoptation for the Visual Studio 2017

2018.05.04:
* fixed: gcc build under linux mint
* fixed: minor bug fix
* new: `tackle/deque.hpp` partial implementation
* new: tests for `tackle/deque.hpp` partial implementation

2018.05.30:
* new: `compressed_type` and `call_traits` based on `boost` library implementation

2018.05.29:
* fixed: missed implementation in the static assert header
* fixed: invalid assert usage in math functions (`BASIC_ASSERT_*` instead of `DEBUG_ASSERT_*`)
* new: `UTILITY_SUPPRESS_OPTIMIZATION_ON_VAR` macros to suppress optimizations around variables or return values in the Release
* new: unit tests under gtest
* changed: `int_log2_floor` function loop unroll (debug builtin optimization)
* changed: permanently enabled POF2 definitions
* changed: `boost::aligned_storage` usage replaced by `std::aligned_storage` to detach public headers from boost headers (C++11)
* refactor: more optimized POF2 definitions for constexpr and runtime cases

2018.05.27:
* fixed: `DEFINE_FORCE_INLINE_TO_FORCE_NO_INLINE` usage

2018.05.22:
* changed: debug.hpp/optimization.hpp definitions check changed from #ifdef/#ifndef into #if/#if! as more safe
* changed: minor improvement
* new: `ERROR_IF_EMPTY_PP_DEF` macro for self filter only not empty defined definitions in `#if` blocks, otherwise through an error

2018.05.21:
* fixed: private definitions interference with public headers
* fixed: aligned_storage_by incorrect declaration header (ODR violation)
* fixed: no case match globbing restore in the `collect_ldd_deps.sh` script
* new: memory functions header

2018.05.07:
* fixed: postinstall fix
* fixed: application main startup helper shell script fix
* fixed: complete build under linux mint
* new: traplib.sh build script
* new: in sources changelog
* other multiple fixes, changes and refactor
